<launch>
	<arg name="js" default="js1"/>
	<arg name="model" default="$(find FullMech_Rep)/urdf/FullMech_Rep.urdf"/>
	<!-- <arg name="world_name" default="$(find husky_gazebo)/worlds/clearpath_playpen.world"/> -->
	<arg name="world_name" default="$(find FullMech_Rep)/world/obstacle_world.world"/>
	<!-- <param name="robot_description" command="$(find xacro)/xacro.py $(arg model)" /> -->
	<param
    name="robot_description"
    textfile="$(find FullMech_Rep)/urdf/FullMech_Rep.urdf" />

	<!-- Launch an empty gazebo world -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(arg world_name)"/>
	</include>
	
	<!-- Transform publisher between base_link of robot and base_footprint -->
	<node
		name="tf_footprint_base"
		pkg="tf"
		type="static_transform_publisher"
		args="0 0 0 0 0 0 drivetrain base_footprint 40" />
	
	<!-- spawn the robot model using the urdf -->
	<node
		name="spawn_model"
		pkg="gazebo_ros"
		type="spawn_model"
		args="-urdf -model FullMech_Rep -x 0 -y 0 -z 0.1 -R 0 -P 0 -Y 0 -param robot_description"
		output="screen" />
	
	
	<node
		name="fake_joint_calibration"
		pkg="rostopic"
		type="rostopic"
		args="pub /calibrated std_msgs/Bool true" />

	<!-- Publishes the joint states -->
	<!-- <node
		name="joint_state_publisher"
		pkg="joint_state_publisher"
		type="joint_state_publisher" /> -->

	<!-- Load PID gain params -->
	<!-- <rosparam file="$(find FullMech_Rep)/config/gazebo_ros_control_params.yaml" command="load"/> -->

	<!-- Publishes the transforms between the base_link (drivetrain) and the rest of the robot's links -->
	<node
		name="robot_state_publisher"
		pkg="robot_state_publisher"
		type="state_publisher" />

	<!-- Load the joint state controller parameters -->
	<rosparam command="load"
            file="$(find FullMech_Rep)/config/joints.yaml"
            ns="rmc_joint_state_controller" />

	<!-- Controller for end effector rotation -->
	<rosparam command="load"
            file="$(find FullMech_Rep)/config/rotate.yaml"
            ns="end_effector_rotate_controller" />

	<!-- Controller for end effector rack -->
	<rosparam command="load"
            file="$(find FullMech_Rep)/config/rack.yaml"
            ns="end_effector_rack_controller" />

	<!-- Controller for dispensing scissor lift -->
	<rosparam command="load"
            file="$(find FullMech_Rep)/config/scissor.yaml"
            ns="dispense_scissor_controller" />

	<!-- Controller for dispensing dump -->
	<rosparam command="load"
            file="$(find FullMech_Rep)/config/dispense.yaml"
            ns="dispense_dump_controller" />

	<!-- Controller for differential drive system -->
	<rosparam command="load"
            file="$(find FullMech_Rep)/config/diffdrive.yaml"
            ns="diffdrive_controller" />

	<!-- Controller for camera joint -->
	<rosparam command="load"
            file="$(find FullMech_Rep)/config/camera.yaml"
            ns="camera_joint_controller" />

	<!-- Launch the joint state controller node -->
	<node name="rmc_controller_spawner" pkg="controller_manager" type="spawner"
		args="rmc_joint_state_controller
			end_effector_rotate_controller
			end_effector_rack_controller
			dispense_scissor_controller
			dispense_dump_controller
			diffdrive_controller
			camera_joint_controller
			--shutdown-timeout 3"/>

	<!-- <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
		<param name="default_topic" value="/diffdrive_controller/cmd_vel"/>
	</node> -->

	

</launch>